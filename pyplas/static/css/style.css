:root {
  --z-index-base: 1000;
  --z-index-code-config: calc(var(--z-index-base) + 10);
  --z-index-toast: calc(var(--z-index-base) + 20);
  --z-index-offcanvas-off: calc(var(--z-index-base) + 25);
  --z-index-header: calc(var(--z-index-base) + 30);
  --z-index-offcanvas-on: calc(var(--z-index-base) + 45);
  /** max z-index is 1055 (modal) **/
}

.only-inq {
  display: none;
}

.blocked-bi:before {
  display: block;
}

/* when node is selected */
.active-node {
    border-left: solid 0.5rem var(--bs-primary);
    border-radius: 2%;
    padding-left: 0 !important;
    margin-left: 0 !important;
}
.active-node.question {
  padding-left: 1px !important;
}

/* ==============================
 left sidebar offcanvas  
 ================================*/
/* when offcanvas show (larger than lg) */
@media (min-width: 993px) { 
  .sidebar {
    position: sticky;
    top: 75px;
    overflow-y: auto;
    max-height: calc(100vh);
  }
}
.sidebar.offcanvas-lg {
  z-index: var(--z-index-offcanvas-off);
}
.sidebar.offcanvas-lg.show {
  z-index: var(--z-index-offcanvas-on);
}

/* ==============================
 pagination 
 ================================*/
.my-pagination {
  text-align: center;
  margin-bottom: 1rem;
}
.pgn-hidden {
  display: none;
}

/* ==================================
  nodesContainer
  - Nodes directly under this element
===================================== */

#nodesContainer > .explain {
  margin-left: 1rem !important;
}

/* =============
  progress-bar 
================ */
@keyframes animation-sample{
  0%{
      left: 0%;
  }
  100%{
      left: 100%;
  }
}
.progress-bar{
  animation-name: animation-sample;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

/* ===========================================================
  dynamic-nodes-container
  - Element to which nodes is dynamically added directly below
============================================================== */
.dynamic-nodes-container {
  border: dotted;
  background-color: rgb(247 247 247);
} 
/* When there are Nodes in */
.dynamic-nodes-container:has(.node) {
  .node-control {
    .btn-group {
      height: auto;
    }
    .btn {
      display: none;
    }
  }
  .node-control:hover {
    .btn {
        display: inline;
        border-radius: 0;
        padding: 0 4px;
        border: none;
    }
  }
  .bi-file-earmark-code, #loadIpynb, .ipynb-loader {
      display: none;
  }
}
/* when there are not Nodes in (with #nodesContainer) */
.dynamic-nodes-container#nodesContainer:not(:has(.node)) {
  text-align: center;
  height: auto;
  .bi-file-earmark-code {
      display: block;
      font-size: 200px;
      margin-top: auto;
      opacity: 0.6;
  }
} 
/* when there are not Nodes in (with .answer-content or example-answer-content) */
.dynamic-nodes-container:is(.answer-content, .explanation-content):not(:has(.node)) {
  .node-control {
    .btn {
      display: inline;
      border-radius: 0;
      padding: 0 4px;
      border: none;
    }
  }
}

/* ===========
  Editor
============== */
.editor {
  height: auto;
  padding-bottom: 1rem;
  box-sizing: content-box;
}


/* ==========
  Code Node
============= */
.code {
  .node-toolbar {
      padding-top: 0.15rem;
      .btn {
        padding: 0rem;
        border: none;
        i {font-size: 1.1rem;}
        i:before {padding: 0.1rem;}
        .spinner-border {
          width: 0.9rem;
          height: 0.9rem;
        }
      }
      .btn:hover{
        i:before {
          color: white;
        }
      }
      .btn-interrupt {padding: 0rem 0.2rem;}
  }
  .code-node-main {
      .code-config {
        height: 1.7rem;
        border-radius: 5px;
        .btn {
          height: 1.5rem;
          padding: 0.2rem 0.3rem;
          margin: 0.1rem;
          i {font-size: 0.9rem;}
        }
        .dropdown.code-options:not(:has(.dropdown-item)) {
          display: none;
        }
      }
      .return-box {
          padding: 0.1rem 0 1rem 0;
          overflow-x: auto;
          p {
              padding: 0 1rem;
              margin-bottom: 0rem;
              white-space: pre-wrap;
              font-size: 0.85rem;
          }
          div:has(.dataframe) {
            padding: .5rem 1rem;
          }
          .dataframe {
            all: unset !important;
            margin-left: .5rem;
            margin-top: .25rem;
            th, td {
              border: solid 1px var(--bs-dark-border-subtle);
              border-collapse: collapse;
            }
            thead th {
              padding: .25rem;
              background-color: var(--bs-dark);
              color: white;
            }
            tbody {
              text-align: right;
              tr, th, td {
                padding-left: .25rem;
                padding-right: .25rem;
              }
              tr:nth-child(even) {
                background-color: var(--bs-secondary-bg-subtle);
              }
            }
          }
      }
  }
}
.code[data-run-state] > .node-toolbar {
  .btn-exec {display: block;}
  .executing {display: none;}
  .waiting {display: none;}
}
.code[data-run-state="running"] > .node-toolbar {
  .btn-exec {display: none;}
  .executing {display: block;}
  .waiting {display: none;}
}
.code[data-run-state="suspending"] > .node-toolbar {
  .btn-exec {display: none;}
  .executing {display: none;}
  .waiting {display: block;}
}


/* ============
  question Node 
=============== */
.question {
  .card-header {
    .btn {
      height: 1.5rem;
      padding: 0.2rem;
      i {
        font-size: 0.9rem;
        &::before {
          display: block;
        }
      }
    }
    .toast {
      max-width: 35rem;
      width: 80%;
      .toast-body {
        max-height: 20rem;
      }
    }
    .progress-badge:hover + .for-toast {
      .toast {
        display: block;
      }
    }
  }
  .card-body {
    .only-inq { display: block !important;} 
    .node-control .toggle-addQ {display: none !important;}
    .question-info {
      .dropdown.question-options {
        .dropdown-toggle::after {
          content: none;
        }
      }
      .dropdown.question-options:not(:has(.dropdown-item)) {
        display: none;
      }
    }
  }
}
/* when answers is wrong */
.question[data-q-progress="1"] {
  .toast {
    border: solid var(--bs-danger);
    background-color: #ffdddd;
    .toast-header {
      i { color: var(--bs-danger)}
      span::before {
        content: "ERROR";
        color: var(--bs-danger)
      }
    }
  }
}
/* when answers is correct */
.question[data-q-progress="2"] {
  .toast {
    border: solid var(--bs-success);
    background-color: rgb(182 216 182);
    .toast-header {
      i { color: var(--bs-success)}
      span::before {
        content: "SUCCESS";
        color: var(--bs--success)
      }
    }
  }
}


/* progress badge */
*[data-q-progress="0"] {
  .progress-badge {
    background-color: var(--bs-gray-300);
    color: var(--bs-dark);
    &::before {
      content: "Untried";
    }
  }
  a.explanation-tabpane-switch:not(.allways-active) {
    color: gray;
    pointer-events: none;
  }
}
*[data-q-progress="1"] {
  .progress-badge {
    background-color: var(--bs-warning);
    color: var(--bs-dark);
    &::before {
      content: "Tried"
    }
  }
  a.explanation-tabpane-switch:not(.allways-active) {
    color: gray;
    pointer-events: none;
  }
}
*[data-q-progress="2"] {
  .progress-badge {
    background-color: var(--bs-success);
    &::before {
      content: "Complete"
    }
  }
}


#question-nav {
  .nav-link.active {
    background-color: var(--bs-success-bg-subtle);
    color: var(--bs-dark);
  }
}